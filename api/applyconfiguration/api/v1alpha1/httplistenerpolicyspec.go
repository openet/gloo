// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

// HTTPListenerPolicySpecApplyConfiguration represents a declarative configuration of the HTTPListenerPolicySpec type for use
// with apply.
type HTTPListenerPolicySpecApplyConfiguration struct {
	TargetRef *LocalPolicyTargetReferenceApplyConfiguration `json:"targetRef,omitempty"`
	Compress  *bool                                         `json:"compress,omitempty"`
	AccessLog []AccessLogApplyConfiguration                 `json:"accessLog,omitempty"`
}

// HTTPListenerPolicySpecApplyConfiguration constructs a declarative configuration of the HTTPListenerPolicySpec type for use with
// apply.
func HTTPListenerPolicySpec() *HTTPListenerPolicySpecApplyConfiguration {
	return &HTTPListenerPolicySpecApplyConfiguration{}
}

// WithTargetRef sets the TargetRef field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the TargetRef field is set to the value of the last call.
func (b *HTTPListenerPolicySpecApplyConfiguration) WithTargetRef(value *LocalPolicyTargetReferenceApplyConfiguration) *HTTPListenerPolicySpecApplyConfiguration {
	b.TargetRef = value
	return b
}

// WithCompress sets the Compress field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Compress field is set to the value of the last call.
func (b *HTTPListenerPolicySpecApplyConfiguration) WithCompress(value bool) *HTTPListenerPolicySpecApplyConfiguration {
	b.Compress = &value
	return b
}

// WithAccessLog adds the given value to the AccessLog field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the AccessLog field.
func (b *HTTPListenerPolicySpecApplyConfiguration) WithAccessLog(values ...*AccessLogApplyConfiguration) *HTTPListenerPolicySpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithAccessLog")
		}
		b.AccessLog = append(b.AccessLog, *values[i])
	}
	return b
}
