// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/client-go/applyconfigurations/meta/v1"
	v1 "sigs.k8s.io/gateway-api/apis/v1"
)

// PolicyAncestorStatusApplyConfiguration represents a declarative configuration of the PolicyAncestorStatus type for use
// with apply.
type PolicyAncestorStatusApplyConfiguration struct {
	AncestorRef    *v1.ParentReference                  `json:"ancestorRef,omitempty"`
	ControllerName *string                              `json:"controllerName,omitempty"`
	Conditions     []metav1.ConditionApplyConfiguration `json:"conditions,omitempty"`
}

// PolicyAncestorStatusApplyConfiguration constructs a declarative configuration of the PolicyAncestorStatus type for use with
// apply.
func PolicyAncestorStatus() *PolicyAncestorStatusApplyConfiguration {
	return &PolicyAncestorStatusApplyConfiguration{}
}

// WithAncestorRef sets the AncestorRef field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the AncestorRef field is set to the value of the last call.
func (b *PolicyAncestorStatusApplyConfiguration) WithAncestorRef(value v1.ParentReference) *PolicyAncestorStatusApplyConfiguration {
	b.AncestorRef = &value
	return b
}

// WithControllerName sets the ControllerName field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ControllerName field is set to the value of the last call.
func (b *PolicyAncestorStatusApplyConfiguration) WithControllerName(value string) *PolicyAncestorStatusApplyConfiguration {
	b.ControllerName = &value
	return b
}

// WithConditions adds the given value to the Conditions field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Conditions field.
func (b *PolicyAncestorStatusApplyConfiguration) WithConditions(values ...*metav1.ConditionApplyConfiguration) *PolicyAncestorStatusApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithConditions")
		}
		b.Conditions = append(b.Conditions, *values[i])
	}
	return b
}
