// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	v1 "k8s.io/client-go/applyconfigurations/meta/v1"
)

// PolicyStatusApplyConfiguration represents a declarative configuration of the PolicyStatus type for use
// with apply.
type PolicyStatusApplyConfiguration struct {
	Conditions []v1.ConditionApplyConfiguration         `json:"conditions,omitempty"`
	Ancestors  []PolicyAncestorStatusApplyConfiguration `json:"ancestors,omitempty"`
}

// PolicyStatusApplyConfiguration constructs a declarative configuration of the PolicyStatus type for use with
// apply.
func PolicyStatus() *PolicyStatusApplyConfiguration {
	return &PolicyStatusApplyConfiguration{}
}

// WithConditions adds the given value to the Conditions field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Conditions field.
func (b *PolicyStatusApplyConfiguration) WithConditions(values ...*v1.ConditionApplyConfiguration) *PolicyStatusApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithConditions")
		}
		b.Conditions = append(b.Conditions, *values[i])
	}
	return b
}

// WithAncestors adds the given value to the Ancestors field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Ancestors field.
func (b *PolicyStatusApplyConfiguration) WithAncestors(values ...*PolicyAncestorStatusApplyConfiguration) *PolicyStatusApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithAncestors")
		}
		b.Ancestors = append(b.Ancestors, *values[i])
	}
	return b
}
