syntax = "proto3";
package gloo.solo.io;
option go_package = "github.com/solo-io/gloo/projects/gloo/pkg/api/v1";

import "extproto/ext.proto";
option (extproto.equal_all) = true;
option (extproto.hash_all) = true;
option (extproto.clone_all) = true;

import "github.com/solo-io/gloo/projects/gloo/api/v1/extensions.proto";
import "github.com/solo-io/gloo/projects/gloo/api/v1/options/retries/retries.proto";
import "github.com/solo-io/gloo/projects/gloo/api/v1/options/stats/stats.proto";
import "github.com/solo-io/gloo/projects/gloo/api/v1/options/headers/headers.proto";
import "github.com/solo-io/gloo/projects/gloo/api/v1/options/cors/cors.proto";
import "github.com/solo-io/gloo/projects/gloo/api/v1/options/transformation/transformation.proto";
import "github.com/solo-io/gloo/projects/gloo/api/v1/enterprise/options/ratelimit/ratelimit.proto";
import "github.com/solo-io/gloo/projects/gloo/api/v1/enterprise/options/waf/waf.proto";
import "github.com/solo-io/gloo/projects/gloo/api/v1/enterprise/options/jwt/jwt.proto";
import "github.com/solo-io/gloo/projects/gloo/api/v1/enterprise/options/rbac/rbac.proto";
import "github.com/solo-io/gloo/projects/gloo/api/v1/enterprise/options/extauth/v1/extauth.proto";
import "github.com/solo-io/gloo/projects/gloo/api/v1/enterprise/options/dlp/dlp.proto";
import "github.com/solo-io/gloo/projects/gloo/api/external/envoy/extensions/filters/http/buffer/v3/buffer.proto";
import "github.com/solo-io/gloo/projects/gloo/api/external/envoy/extensions/filters/http/csrf/v3/csrf.proto";
import "github.com/solo-io/gloo/projects/gloo/api/v1/enterprise/options/extproc/extproc.proto";

import "google/protobuf/wrappers.proto";

// Optional, feature-specific configuration that lives on virtual hosts.
// Each VirtualHostOptions object contains configuration for a specific feature.
// Note to developers: new Virtual Host plugins must be added to this struct
// to be usable by Gloo. (plugins currently need to be compiled into Gloo)
message VirtualHostOptions {
    // Extensions will be passed along from Listeners, Gateways, VirtualServices, Routes, and Route tables to the
    // underlying Proxy, making them useful for controllers, validation tools, etc. which interact with kubernetes yaml.
    //
    // Some sample use cases:
    // * controllers, deployment pipelines, helm charts, etc. which wish to use extensions as a kind of opaque metadata.
    // * In the future, Gloo may support gRPC-based plugins which communicate with the Gloo translator out-of-process.
    // Opaque Extensions enables development of out-of-process plugins without requiring recompiling & redeploying Gloo's API.
    Extensions extensions = 1;
    retries.options.gloo.solo.io.RetryPolicy retries = 5;
    stats.options.gloo.solo.io.Stats stats = 10;
    // Append/Remove headers on Requests or Responses on all routes contained in this Virtual Host
    headers.options.gloo.solo.io.HeaderManipulation header_manipulation = 2;
    // Defines a CORS policy for the virtual host.
    // If a CORS policy is also defined on the route matched by the request, the route policy
    // overrides the virtual host policy for any configured field unless CorsPolicyMergeSettings are specified that define an
    // alternate behavior.
    cors.options.gloo.solo.io.CorsPolicy cors = 3;
    // Transformations to apply. Note: this field is superseded by `staged_transformations`.
    // If `staged_transformations.regular` is set, this field will be ignored.
    transformation.options.gloo.solo.io.Transformations transformations = 4 [deprecated = true];
    // Enterprise-only: Config for GlooE rate-limiting using simplified (gloo-specific) API
    ratelimit.options.gloo.solo.io.IngressRateLimit ratelimit_basic = 6;

    oneof rate_limit_early_config_type {
        // Enterprise-only: Partial config for GlooE rate-limiting based on Envoy's rate-limit service;
        // supports Envoy's rate-limit service API. (reference here: https://github.com/lyft/ratelimit#configuration)
        // Configure rate-limit *actions* here, which define how request characteristics get translated into
        // descriptors used by the rate-limit service for rate-limiting. Configure rate-limit *descriptors* and
        // their associated limits on the Gloo settings.
        // Only one of `ratelimit_early` or `rate_limit_early_configs` can be set.
        ratelimit.options.gloo.solo.io.RateLimitVhostExtension ratelimit_early = 72;

        // References to RateLimitConfig resources. This is used to configure the GlooE rate limit server.
        // Only one of `ratelimit_early` or `rate_limit_early_configs` can be set.
        ratelimit.options.gloo.solo.io.RateLimitConfigRefs rate_limit_early_configs = 73;
    }

    oneof rate_limit_config_type {
        // Enterprise-only: Partial config for GlooE rate-limiting based on Envoy's rate-limit service;
        // supports Envoy's rate-limit service API. (reference here: https://github.com/lyft/ratelimit#configuration)
        // Configure rate-limit *actions* here, which define how request characteristics get translated into
        // descriptors used by the rate-limit service for rate-limiting. Configure rate-limit *descriptors* and
        // their associated limits on the Gloo settings.
        // Only one of `ratelimit` or `rate_limit_configs` can be set.
        ratelimit.options.gloo.solo.io.RateLimitVhostExtension ratelimit = 70;

        // References to RateLimitConfig resources. This is used to configure the GlooE rate limit server.
        // Only one of `ratelimit` or `rate_limit_configs` can be set.
        ratelimit.options.gloo.solo.io.RateLimitConfigRefs rate_limit_configs = 71;
    }

    oneof rate_limit_regular_config_type {
        // Enterprise-only: Partial config for GlooE rate-limiting based on Envoy's rate-limit service;
        // supports Envoy's rate-limit service API. (reference here: https://github.com/lyft/ratelimit#configuration)
        // Configure rate-limit *actions* here, which define how request characteristics get translated into
        // descriptors used by the rate-limit service for rate-limiting. Configure rate-limit *descriptors* and
        // their associated limits on the Gloo settings.
        // Only one of `ratelimit_regular` or `rate_limit_regular_configs` can be set.
        ratelimit.options.gloo.solo.io.RateLimitVhostExtension ratelimit_regular = 74;

        // References to RateLimitConfig resources. This is used to configure the GlooE rate limit server.
        // Only one of `ratelimit_regular` or `rate_limit_regular_configs` can be set.
        ratelimit.options.gloo.solo.io.RateLimitConfigRefs rate_limit_regular_configs = 75;
    }

    // Enterprise-only: Config for Web Application Firewall (WAF), supporting
    // the popular ModSecurity 3.0 ruleset
    waf.options.gloo.solo.io.Settings waf = 8;

    oneof jwt_config {
        // Enterprise-only: Config for reading and verifying JWTs. Copy verifiable information from JWTs into other
        // headers to make routing decisions or combine with RBAC for fine-grained access control.
        // This has been deprecated in favor of staged jwt. The same configuration can be achieved through staged jwt
        // using AfterExtAuth.
        jwt.options.gloo.solo.io.VhostExtension jwt = 9 [deprecated=true];

        // Enterprise-only: Config for reading and verifying JWTs. Copy verifiable information from JWTs into other
        // headers to make routing decisions or combine with RBAC for fine-grained access control.
        // JWT configuration has stages "BeforeExtAuth" and "AfterExtAuth". BeforeExtAuth JWT
        // validation runs before the external authentication service. This is useful when JWT
        // is used in conjunction with other auth mechanisms specified in the [boolean expression Extauth API](https://docs.solo.io/gloo-edge/latest/reference/api/github.com/solo-io/gloo/projects/gloo/api/v1/enterprise/options/extauth/v1/extauth.proto.sk/#authconfig).
        // AfterExtAuth validation runs after external authentication service, which is useful for verifying
        // JWTs obtained during extauth (e.g. oauth/oidc)
        jwt.options.gloo.solo.io.JwtStagedVhostExtension jwt_staged = 19;
    }

    // Enterprise-only: Config for RBAC (currently only supports RBAC based on JWT claims)
    rbac.options.gloo.solo.io.ExtensionSettings rbac = 11;
    // Enterprise-only: Authentication configuration
    enterprise.gloo.solo.io.ExtAuthExtension extauth = 12;
    // Enterprise-only: Config for data loss prevention
    dlp.options.gloo.solo.io.Config dlp = 13;
    // BufferPerRoute can be used to set the maximum request size
    // that the filter will buffer before the connection
    // manager will stop buffering and return a 413 response.
    // Note: If you have not set a global config (at the gateway level), this
    // override will not do anything by itself.
    .solo.io.envoy.extensions.filters.http.buffer.v3.BufferPerRoute buffer_per_route = 14;
    // Csrf can be used to set percent of requests for which the CSRF filter is enabled, enable shadow-only mode
    // where policies will be evaluated and tracked, but not enforced and add additional source origins
    // that will be allowed in addition to the destination origin.
    // For more, see https://www.envoyproxy.io/docs/envoy/latest/api-v2/config/filter/http/csrf/v2/csrf.proto
    .solo.io.envoy.extensions.filters.http.csrf.v3.CsrfPolicy csrf = 18;
    // IncludeRequestAttemptCount decides whether the x-envoy-attempt-count header
    // should be included in the upstream request.
    // Setting this option will cause it to override any existing header value,
    // so in the case of two Envoys on the request path with this option enabled,
    // the upstream will see the attempt count as perceived by the second Envoy.
    // Defaults to false.
    google.protobuf.BoolValue include_request_attempt_count = 15;
    // IncludeAttemptCountInResponse decides whether the x-envoy-attempt-count header
    // should be included in the downstream response.
    // Setting this option will cause the router to override any existing header value,
    // so in the case of two Envoys on the request path with this option enabled,
    // the downstream will see the attempt count as perceived by the Envoy closest upstream from itself.
    // Defaults to false.
    google.protobuf.BoolValue include_attempt_count_in_response = 16;

    // Early transformations stage. These transformations run before most other options are processed.
    // If the `regular` field is set in here, the `transformations` field is ignored.
    transformation.options.gloo.solo.io.TransformationStages staged_transformations = 17;

    // Enterprise-only: External Processing filter settings for the virtual host. This can be used to
    // override certain HttpListenerOptions settings, and can be overridden by RouteOptions settings.
    extproc.options.gloo.solo.io.RouteSettings ext_proc = 30;

    // Settings for determining merge strategy for CORS settings when present at both Route and VirtualHost levels.
    cors.options.gloo.solo.io.CorsPolicyMergeSettings cors_policy_merge_settings = 20;
}