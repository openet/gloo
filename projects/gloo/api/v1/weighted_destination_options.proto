syntax = "proto3";
package gloo.solo.io;
option go_package = "github.com/solo-io/gloo/projects/gloo/pkg/api/v1";

import "extproto/ext.proto";
option (extproto.equal_all) = true;
option (extproto.hash_all) = true;
option (extproto.clone_all) = true;

import "github.com/solo-io/gloo/projects/gloo/api/v1/options/headers/headers.proto";
import "github.com/solo-io/gloo/projects/gloo/api/v1/options/transformation/transformation.proto";
import "github.com/solo-io/gloo/projects/gloo/api/v1/extensions.proto";
import "github.com/solo-io/gloo/projects/gloo/api/v1/enterprise/options/extauth/v1/extauth.proto";
import "github.com/solo-io/gloo/projects/gloo/api/external/envoy/extensions/filters/http/buffer/v3/buffer.proto";
import "github.com/solo-io/gloo/projects/gloo/api/external/envoy/extensions/filters/http/csrf/v3/csrf.proto";


// Optional, feature-specific configuration that is applied when a specific weighted destination
// is selected for routing.
message WeightedDestinationOptions {
    // Append/Remove headers on Requests or Responses to/from this Weighted Destination
    headers.options.gloo.solo.io.HeaderManipulation header_manipulation = 1;
    // Transformations to apply. Note: this field is superseded by `staged_transformations`.
    // If `staged_transformations.regular` is set, this field will be ignored.
    transformation.options.gloo.solo.io.Transformations transformations = 2 [deprecated = true];
    // Extensions will be passed along from Listeners, Gateways, VirtualServices, Routes, and Route tables to the
    // underlying Proxy, making them useful for controllers, validation tools, etc. which interact with kubernetes yaml.
    //
    // Some sample use cases:
    // * controllers, deployment pipelines, helm charts, etc. which wish to use extensions as a kind of opaque metadata.
    // * In the future, Gloo may support gRPC-based plugins which communicate with the Gloo translator out-of-process.
    // Opaque Extensions enables development of out-of-process plugins without requiring recompiling & redeploying Gloo's API.
    Extensions extensions = 3;
    // Enterprise-only: Authentication configuration
    enterprise.gloo.solo.io.ExtAuthExtension extauth = 4;
    // BufferPerRoute can be used to set the maximum request size
    // that the filter will buffer before the connection
    // manager will stop buffering and return a 413 response.
    // Note: If you have not set a global config (at the gateway level), this
    // override will not do anything by itself.
    .solo.io.envoy.extensions.filters.http.buffer.v3.BufferPerRoute buffer_per_route = 5;

    // Csrf can be used to set percent of requests for which the CSRF filter is enabled, enable shadow-only mode
    // where policies will be evaluated and tracked, but not enforced and add additional source origins
    // that will be allowed in addition to the destination origin.
    // For more, see https://www.envoyproxy.io/docs/envoy/latest/api-v2/config/filter/http/csrf/v2/csrf.proto
    .solo.io.envoy.extensions.filters.http.csrf.v3.CsrfPolicy csrf = 7;

    // Early transformations stage. These transformations run before most other options are processed.
    // If the `regular` field is set in here, the `transformations` field is ignored.
    transformation.options.gloo.solo.io.TransformationStages staged_transformations = 6;
}
