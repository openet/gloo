syntax = "proto3";
package gloo.solo.io;
option go_package = "github.com/solo-io/gloo/projects/gloo/pkg/api/v1";

import "extproto/ext.proto";
option (extproto.equal_all) = true;
option (extproto.hash_all) = true;
option (extproto.clone_all) = true;

import "github.com/solo-io/gloo/projects/gloo/api/v1/options/transformation/transformation.proto";
import "github.com/solo-io/gloo/projects/gloo/api/v1/options/faultinjection/fault.proto";
import "github.com/solo-io/gloo/projects/gloo/api/v1/options/retries/retries.proto";
import "github.com/solo-io/gloo/projects/gloo/api/v1/extensions.proto";
import "github.com/solo-io/gloo/projects/gloo/api/v1/options/tracing/tracing.proto";
import "github.com/solo-io/gloo/projects/gloo/api/v1/options/shadowing/shadowing.proto";
import "github.com/solo-io/gloo/projects/gloo/api/v1/options/headers/headers.proto";
import "github.com/solo-io/gloo/projects/gloo/api/external/envoy/type/matcher/v3/regex.proto";
import "github.com/solo-io/gloo/projects/gloo/api/v1/options/cors/cors.proto";
import "github.com/solo-io/gloo/projects/gloo/api/v1/options/lbhash/lbhash.proto";
import "github.com/solo-io/gloo/projects/gloo/api/v1/options/protocol_upgrade/protocol_upgrade.proto";
import "github.com/solo-io/gloo/projects/gloo/api/v1/enterprise/options/ratelimit/ratelimit.proto";
import "github.com/solo-io/gloo/projects/gloo/api/v1/enterprise/options/waf/waf.proto";
import "github.com/solo-io/gloo/projects/gloo/api/v1/enterprise/options/jwt/jwt.proto";
import "github.com/solo-io/gloo/projects/gloo/api/v1/enterprise/options/rbac/rbac.proto";
import "github.com/solo-io/gloo/projects/gloo/api/v1/enterprise/options/extauth/v1/extauth.proto";
import "github.com/solo-io/gloo/projects/gloo/api/v1/enterprise/options/dlp/dlp.proto";
import "github.com/solo-io/gloo/projects/gloo/api/external/envoy/extensions/filters/http/buffer/v3/buffer.proto";
import "github.com/solo-io/gloo/projects/gloo/api/external/envoy/extensions/filters/http/csrf/v3/csrf.proto";
import "github.com/solo-io/gloo/projects/gloo/api/v1/enterprise/options/extproc/extproc.proto";
import "github.com/solo-io/gloo/projects/gloo/api/v1/enterprise/options/ai/ai.proto";


import "google/protobuf/wrappers.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/struct.proto";


// Optional, feature-specific configuration that lives on routes.
// Each RouteOptions object contains configuration for a specific feature.
// Note to developers: new Route plugins must be added to this struct
// to be usable by Gloo. (plugins currently need to be compiled into Gloo)
message RouteOptions {
    // Transformations to apply. Note: this field is superseded by `staged_transformations`.
    // If `staged_transformations.regular` is set, this field will be ignored.
    transformation.options.gloo.solo.io.Transformations transformations = 1 [deprecated = true];
    fault.options.gloo.solo.io.RouteFaults faults = 2;
    // For requests matched on this route, rewrite the HTTP request path to the provided value before forwarding upstream
    google.protobuf.StringValue prefix_rewrite = 3;
    // Specifies the upstream timeout for the route. If not specified, the default is 15s. This spans between the point
    // at which the entire downstream request (i.e. end-of-stream) has been processed and when the upstream response has
    // been completely processed. A value of 0 will disable the routeâ€™s timeout.
    google.protobuf.Duration timeout = 4 ;
    retries.options.gloo.solo.io.RetryPolicy retries = 5;
    // Extensions will be passed along from Listeners, Gateways, VirtualServices, Routes, and Route tables to the
    // underlying Proxy, making them useful for controllers, validation tools, etc. which interact with kubernetes yaml.
    //
    // Some sample use cases:
    // * controllers, deployment pipelines, helm charts, etc. which wish to use extensions as a kind of opaque metadata.
    // * In the future, Gloo may support gRPC-based plugins which communicate with the Gloo translator out-of-process.
    // Opaque Extensions enables development of out-of-process plugins without requiring recompiling & redeploying Gloo's API.
    Extensions extensions = 6;
    // Defines route-specific tracing configuration.
    // See here for additional information on Envoy's tracing capabilities: https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/observability/tracing.html
    // See [here](https://docs.solo.io/gloo-edge/latest/guides/observability/tracing/) for additional information about configuring tracing with Gloo Edge.
    tracing.options.gloo.solo.io.RouteTracingSettings tracing = 7;
    // Specifies traffic shadowing configuration for the route.
    // See here for additional information on Envoy's shadowing capabilities: https://www.envoyproxy.io/docs/envoy/latest/api-v3/config/route/v3/route.proto#envoy-api-msg-route-routeaction-requestmirrorpolicy
    shadowing.options.gloo.solo.io.RouteShadowing shadowing = 8;
    // Append/Remove headers on Requests or Responses on this Route
    headers.options.gloo.solo.io.HeaderManipulation header_manipulation = 9;
    // For requests matched on this route, rewrite the Host header before forwarding upstream
    oneof host_rewrite_type {
        // Indicates that during forwarding, the host header will be swapped with this value.
        string host_rewrite = 10;
        // Enable/Disable auto host re-write.
        // Indicates that the host header will be swapped with the hostname of the upstream host.
        // This setting is only honored for upstreams that use DNS resolution (i.e., their generated Envoy cluster is
        // of type STRICT_DNS or LOGICAL_DNS -- think aws, azure, or static upstreams with hostnames)
        google.protobuf.BoolValue auto_host_rewrite = 19;

        // Indicates that during forwarding, the host header will be swapped with the result of the regex
        // substitution executed on path value with query and fragment removed.
        .solo.io.envoy.type.matcher.v3.RegexMatchAndSubstitute host_rewrite_path_regex = 101;

        // Indicates that during forwarding, the host header will be swapped with the content of given downstream or custom header.
        // If header value is empty, host header is left intact.
        // Using this option will append the x-forwarded-host header if append_x_forwarded_host is set.
        google.protobuf.StringValue host_rewrite_header = 147;
    };
    // If true and there is a host rewrite, appends the x-forwarded-host header to requests.
    google.protobuf.BoolValue append_x_forwarded_host = 146;
    // Defines a CORS policy for the route.
    // If a CORS policy is defined on both the route and the virtual host, the merge behavior for these policies is
    // determined by the CorsPolicyMergeSettings defined on the VirtualHost.
    cors.options.gloo.solo.io.CorsPolicy cors = 11;
    // For routes served by a hashing load balancer, this defines the input to the hash key
    // Gloo configures Envoy with the first available RouteActionHashConfig among the following ordered list of providers:
    // - route, upstream, virtual service
    lbhash.options.gloo.solo.io.RouteActionHashConfig lb_hash = 12;
    // Route configuration for protocol upgrade requests.
    repeated protocol_upgrade.options.gloo.solo.io.ProtocolUpgradeConfig upgrades = 21;

    // Enterprise-only: Config for GlooE rate-limiting using simplified (gloo-specific) API
    ratelimit.options.gloo.solo.io.IngressRateLimit ratelimit_basic = 13;

    oneof rate_limit_early_config_type {
        // Enterprise-only: Partial config for GlooE rate-limiting based on Envoy's rate-limit service;
        // supports Envoy's rate-limit service API. (reference here: https://github.com/lyft/ratelimit#configuration)
        // Configure rate-limit *actions* here, which define how request characteristics get translated into
        // descriptors used by the rate-limit service for rate-limiting. Configure rate-limit *descriptors* and
        // their associated limits on the Gloo settings.
        // Only one of `ratelimit_early` or `rate_limit_early_configs` can be set.
        ratelimit.options.gloo.solo.io.RateLimitRouteExtension ratelimit_early = 142;

        // References to RateLimitConfig resources. This is used to configure the GlooE rate limit server.
        // Only one of `ratelimit_early` or `rate_limit_early_configs` can be set.
        ratelimit.options.gloo.solo.io.RateLimitConfigRefs rate_limit_early_configs = 143;
    }

    oneof rate_limit_config_type {
        // Enterprise-only: Partial config for GlooE rate-limiting based on Envoy's rate-limit service;
        // supports Envoy's rate-limit service API. (reference here: https://github.com/lyft/ratelimit#configuration)
        // Configure rate-limit *actions* here, which define how request characteristics get translated into
        // descriptors used by the rate-limit service for rate-limiting. Configure rate-limit *descriptors* and
        // their associated limits on the Gloo settings.
        // Only one of `ratelimit` or `rate_limit_configs` can be set.
        ratelimit.options.gloo.solo.io.RateLimitRouteExtension ratelimit = 140;

        // References to RateLimitConfig resources. This is used to configure the GlooE rate limit server.
        // Only one of `ratelimit` or `rate_limit_configs` can be set.
        ratelimit.options.gloo.solo.io.RateLimitConfigRefs rate_limit_configs = 141;
    }

    oneof rate_limit_regular_config_type {
        // Enterprise-only: Partial config for GlooE rate-limiting based on Envoy's rate-limit service;
        // supports Envoy's rate-limit service API. (reference here: https://github.com/lyft/ratelimit#configuration)
        // Configure rate-limit *actions* here, which define how request characteristics get translated into
        // descriptors used by the rate-limit service for rate-limiting. Configure rate-limit *descriptors* and
        // their associated limits on the Gloo settings.
        // Only one of `ratelimit_early` or `rate_limit_early_configs` can be set.
        ratelimit.options.gloo.solo.io.RateLimitRouteExtension ratelimit_regular = 144;

        // References to RateLimitConfig resources. This is used to configure the GlooE rate limit server.
        // Only one of `ratelimit_early` or `rate_limit_early_configs` can be set.
        ratelimit.options.gloo.solo.io.RateLimitConfigRefs rate_limit_regular_configs = 145;
    }

    // Enterprise-only: Config for Web Application Firewall (WAF), supporting
    // the popular ModSecurity 3.0 ruleset
    waf.options.gloo.solo.io.Settings waf = 15;
    oneof jwt_config{
        // Enterprise-only: Config for reading and verifying JWTs. Copy verifiable information from JWTs into other
        // headers to make routing decisions or combine with RBAC for fine-grained access control.
        // This has been deprecated in favor of staged jwt. The same configuration can be achieved through staged jwt
        // using AfterExtAuth.
        jwt.options.gloo.solo.io.RouteExtension jwt = 16 [deprecated = true];

        // Enterprise-only: Config for reading and verifying JWTs. Copy verifiable information from JWTs into other
        // headers to make routing decisions or combine with RBAC for fine-grained access control.
        // JWT configuration has stages "BeforeExtAuth" and "AfterExtAuth". BeforeExtAuth JWT
        // validation runs before the external authentication service. This is useful when JWT
        // is used in conjunction with other auth mechanisms specified in the [boolean expression Extauth API](https://docs.solo.io/gloo-edge/latest/reference/api/github.com/solo-io/gloo/projects/gloo/api/v1/enterprise/options/extauth/v1/extauth.proto.sk/#authconfig).
        // AfterExtAuth validation runs after external authentication service, which is useful for verifying
        // JWTs obtained during extauth (e.g. oauth/oidc)
        jwt.options.gloo.solo.io.JwtStagedRouteExtension jwt_staged = 25;

        // Enterprise-only: Config for reading and verifying JWTs. Copy verifiable information from JWTs into other
        // headers to make routing decisions or combine with RBAC for fine-grained access control.
        // JWT configuration has stages "BeforeExtAuth" and "AfterExtAuth". BeforeExtAuth JWT
        // validation runs before the external authentication service. This is useful when JWT
        // is used in conjunction with other auth mechanisms specified in the [boolean expression Extauth API](https://docs.solo.io/gloo-edge/latest/reference/api/github.com/solo-io/gloo/projects/gloo/api/v1/enterprise/options/extauth/v1/extauth.proto.sk/#authconfig).
        // AfterExtAuth validation runs after external authentication service, which is useful for verifying
        // JWTs obtained during extauth (e.g. oauth/oidc)
        jwt.options.gloo.solo.io.JwtStagedRouteProvidersExtension jwt_providers_staged = 32;
    }

    // Enterprise-only: Config for RBAC (currently only supports RBAC based on JWT claims)
    rbac.options.gloo.solo.io.ExtensionSettings rbac = 17;
    // Enterprise-only: Authentication configuration
    enterprise.gloo.solo.io.ExtAuthExtension extauth = 18;
    // Enterprise-only: Config for data loss prevention
    dlp.options.gloo.solo.io.Config dlp = 20;

    // BufferPerRoute can be used to set the maximum request size
    // that the filter will buffer before the connection
    // manager will stop buffering and return a 413 response.
    // Note: If you have not set a global config (at the gateway level), this
    // override will not do anything by itself.
    .solo.io.envoy.extensions.filters.http.buffer.v3.BufferPerRoute buffer_per_route = 22;

    // Csrf can be used to set percent of requests for which the CSRF filter is enabled, enable shadow-only mode
    // where policies will be evaluated and tracked, but not enforced and add additional source origins
    // that will be allowed in addition to the destination origin.
    // For more, see https://www.envoyproxy.io/docs/envoy/latest/api-v2/config/filter/http/csrf/v2/csrf.proto
    .solo.io.envoy.extensions.filters.http.csrf.v3.CsrfPolicy csrf = 24;

    // Early transformations stage. These transformations run before most other options are processed.
    // If the `regular` field is set in here, the `transformations` field is ignored.
    transformation.options.gloo.solo.io.TransformationStages staged_transformations = 23;

    // This field can be used to provide additional information about the route. This metadata can be consumed
    // by the Envoy filters that process requests that match the route. For more info about metadata, see
    // [here](https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/advanced/data_sharing_between_filters#metadata).
    //
    // The value of this field will be propagated to the `metadata` attribute of the corresponding Envoy route.
    // Please refer to the [Envoy documentation](https://www.envoyproxy.io/docs/envoy/latest/api-v3/config/route/v3/route_components.proto#config-route-v3-route)
    // for more details about the `metadata` attribute.
    map<string, google.protobuf.Struct> envoy_metadata = 26;

    // For requests matched on this route, rewrite the HTTP request path according to the provided regex pattern before forwarding upstream
    // Please refer to the [Envoy documentation](https://www.envoyproxy.io/docs/envoy/v1.14.1/api-v3/config/route/v3/route_components.proto#envoy-v3-api-field-config-route-v3-routeaction-regex-rewrite)
    // for more details about the `regex_rewrite` attribute
    .solo.io.envoy.type.matcher.v3.RegexMatchAndSubstitute regex_rewrite = 27;

    // This is a 1:1 translation to the [Envoy API described here](https://www.envoyproxy.io/docs/envoy/latest/api-v3/config/route/v3/route_components.proto#envoy-v3-api-msg-config-route-v3-routeaction-maxstreamduration)
    message MaxStreamDuration {
        // Specifies the maximum duration allowed for streams on the route. If not specified, the value
        // from the [max_stream_duration](https://www.envoyproxy.io/docs/envoy/latest/api-v3/config/core/v3/protocol.proto#envoy-v3-api-field-config-core-v3-httpprotocoloptions-max-stream-duration)
        // field in [HttpConnectionManager.common_http_protocol_options](https://www.envoyproxy.io/docs/envoy/latest/api-v3/extensions/filters/network/http_connection_manager/v3/http_connection_manager.proto#envoy-v3-api-field-extensions-filters-network-http-connection-manager-v3-httpconnectionmanager-common-http-protocol-options)
        // is used. If this field is set explicitly to zero, any HttpConnectionManager max_stream_duration timeout will be disabled for this route.
        google.protobuf.Duration max_stream_duration = 1;

        // If present, and the request contains a [grpc-timeout header](https://github.com/grpc/grpc/blob/master/doc/PROTOCOL-HTTP2.md), use that value as the
        // `max_stream_duration`, but limit the applied timeout to the maximum value specified here.
        // If set to 0, the `grpc-timeout` header is used without modification.
        google.protobuf.Duration grpc_timeout_header_max = 2;

        // If present, Envoy will adjust the timeout provided by the `grpc-timeout` header by
        // subtracting the provided duration from the header. This is useful for allowing Envoy to set
        // its global timeout to be less than that of the deadline imposed by the calling client, which
        // makes it more likely that Envoy will handle the timeout instead of having the call canceled
        // by the client. If, after applying the offset, the resulting timeout is zero or negative,
        // the stream will timeout immediately.
        google.protobuf.Duration grpc_timeout_header_offset = 3;
    }

    // Settings for maximum durations and timeouts for streams on the route.
    // Please refer to the [Envoy documentation](https://www.envoyproxy.io/docs/envoy/latest/api-v3/config/route/v3/route_components.proto#envoy-v3-api-msg-config-route-v3-routeaction-maxstreamduration)
    MaxStreamDuration max_stream_duration = 28;

    // Specifies the idle timeout for the route. If not specified, there is no per-route idle timeout,
    // although the Gateway's [httpConnectionManagerSettings](https://docs.solo.io/gloo-edge/latest/reference/api/github.com/solo-io/gloo/projects/gloo/api/v1/options/hcm/hcm.proto.sk/#httpconnectionmanagersettings)
    // wide stream_idle_timeout will still apply. A value of 0 will completely disable the routeâ€™s idle timeout, even if a connection manager stream idle timeout is configured.
    // Please refer to the [Envoy documentation](https://www.envoyproxy.io/docs/envoy/latest/api-v3/config/route/v3/route_components.proto#envoy-v3-api-field-config-route-v3-routeaction-idle-timeout)
    google.protobuf.Duration idle_timeout = 29;

    // Enterprise-only: External Processing filter settings for the route. This can be used to
    // override certain HttpListenerOptions or VirtualHostOptions settings.
    extproc.options.gloo.solo.io.RouteSettings ext_proc = 30;

    // Enterprise-only: Settings to configure ai settings for a route.
    // These settings will only apply if the backend is an `ai` Upstream.
    ai.options.gloo.solo.io.RouteSettings ai = 31;
}