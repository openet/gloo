// Code generated by solo-kit. DO NOT EDIT.

package v1

import (
	"fmt"
	"hash"
	"hash/fnv"
	"log"

	"github.com/rotisserie/eris"
	"github.com/solo-io/go-utils/hashutils"
	"github.com/solo-io/solo-kit/pkg/api/v1/resources"
	"github.com/solo-io/solo-kit/pkg/api/v1/resources/core"
	"go.uber.org/zap"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type EnterpriseSnapshot struct {
	AuthConfigs AuthConfigList
}

func (s EnterpriseSnapshot) Clone() EnterpriseSnapshot {
	return EnterpriseSnapshot{
		AuthConfigs: s.AuthConfigs.Clone(),
	}
}

func (s EnterpriseSnapshot) Hash(hasher hash.Hash64) (uint64, error) {
	if hasher == nil {
		hasher = fnv.New64()
	}
	if _, err := s.hashAuthConfigs(hasher); err != nil {
		return 0, err
	}
	return hasher.Sum64(), nil
}

func (s EnterpriseSnapshot) hashAuthConfigs(hasher hash.Hash64) (uint64, error) {
	return hashutils.HashAllSafe(hasher, s.AuthConfigs.AsInterfaces()...)
}

func (s EnterpriseSnapshot) HashFields() []zap.Field {
	var fields []zap.Field
	hasher := fnv.New64()
	AuthConfigsHash, err := s.hashAuthConfigs(hasher)
	if err != nil {
		log.Println(eris.Wrapf(err, "error hashing, this should never happen"))
	}
	fields = append(fields, zap.Uint64("authConfigs", AuthConfigsHash))
	snapshotHash, err := s.Hash(hasher)
	if err != nil {
		log.Println(eris.Wrapf(err, "error hashing, this should never happen"))
	}
	return append(fields, zap.Uint64("snapshotHash", snapshotHash))
}

func (s *EnterpriseSnapshot) GetResourcesList(resource resources.Resource) (resources.ResourceList, error) {
	switch resource.(type) {
	case *AuthConfig:
		return s.AuthConfigs.AsResources(), nil
	default:
		return resources.ResourceList{}, eris.New("did not contain the input resource type returning empty list")
	}
}

func (s *EnterpriseSnapshot) RemoveFromResourceList(resource resources.Resource) error {
	refKey := resource.GetMetadata().Ref().Key()
	switch resource.(type) {
	case *AuthConfig:

		for i, res := range s.AuthConfigs {
			if refKey == res.GetMetadata().Ref().Key() {
				s.AuthConfigs = append(s.AuthConfigs[:i], s.AuthConfigs[i+1:]...)
				break
			}
		}
		return nil
	default:
		return eris.Errorf("did not remove the resource because its type does not exist [%T]", resource)
	}
}

func (s *EnterpriseSnapshot) RemoveMatches(predicate core.Predicate) {
	var AuthConfigs AuthConfigList
	for _, res := range s.AuthConfigs {
		if matches := predicate(res.GetMetadata()); !matches {
			AuthConfigs = append(AuthConfigs, res)
		}
	}
	s.AuthConfigs = AuthConfigs
}

func (s *EnterpriseSnapshot) UpsertToResourceList(resource resources.Resource) error {
	refKey := resource.GetMetadata().Ref().Key()
	switch typed := resource.(type) {
	case *AuthConfig:
		updated := false
		for i, res := range s.AuthConfigs {
			if refKey == res.GetMetadata().Ref().Key() {
				s.AuthConfigs[i] = typed
				updated = true
			}
		}
		if !updated {
			s.AuthConfigs = append(s.AuthConfigs, typed)
		}
		s.AuthConfigs.Sort()
		return nil
	default:
		return eris.Errorf("did not add/replace the resource type because it does not exist %T", resource)
	}
}

type EnterpriseSnapshotStringer struct {
	Version     uint64
	AuthConfigs []string
}

func (ss EnterpriseSnapshotStringer) String() string {
	s := fmt.Sprintf("EnterpriseSnapshot %v\n", ss.Version)

	s += fmt.Sprintf("  AuthConfigs %v\n", len(ss.AuthConfigs))
	for _, name := range ss.AuthConfigs {
		s += fmt.Sprintf("    %v\n", name)
	}

	return s
}

func (s EnterpriseSnapshot) Stringer() EnterpriseSnapshotStringer {
	snapshotHash, err := s.Hash(nil)
	if err != nil {
		log.Println(eris.Wrapf(err, "error hashing, this should never happen"))
	}
	return EnterpriseSnapshotStringer{
		Version:     snapshotHash,
		AuthConfigs: s.AuthConfigs.NamespacesDotNames(),
	}
}

var EnterpriseGvkToHashableResource = map[schema.GroupVersionKind]func() resources.HashableResource{
	AuthConfigGVK: NewAuthConfigHashableResource,
}
