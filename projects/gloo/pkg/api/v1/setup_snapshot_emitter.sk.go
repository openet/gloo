// Code generated by solo-kit. DO NOT EDIT.

package v1

import (
	"sync"
	"time"

	github_com_solo_io_solo_kit_pkg_api_v1_resources_common_kubernetes "github.com/solo-io/solo-kit/pkg/api/v1/resources/common/kubernetes"

	"go.opencensus.io/stats"
	"go.opencensus.io/stats/view"
	"go.opencensus.io/tag"
	"go.uber.org/zap"

	"github.com/solo-io/solo-kit/pkg/api/v1/clients"
	"github.com/solo-io/solo-kit/pkg/errors"
	skstats "github.com/solo-io/solo-kit/pkg/stats"

	"github.com/solo-io/go-utils/contextutils"
	"github.com/solo-io/go-utils/errutils"
)

var (
	// Deprecated. See mSetupResourcesIn
	mSetupSnapshotIn = stats.Int64("setup.gloo.solo.io/emitter/snap_in", "Deprecated. Use setup.gloo.solo.io/emitter/resources_in. The number of snapshots in", "1")

	// metrics for emitter
	mSetupResourcesIn    = stats.Int64("setup.gloo.solo.io/emitter/resources_in", "The number of resource lists received on open watch channels", "1")
	mSetupSnapshotOut    = stats.Int64("setup.gloo.solo.io/emitter/snap_out", "The number of snapshots out", "1")
	mSetupSnapshotMissed = stats.Int64("setup.gloo.solo.io/emitter/snap_missed", "The number of snapshots missed", "1")

	// views for emitter
	// deprecated: see setupResourcesInView
	setupsnapshotInView = &view.View{
		Name:        "setup.gloo.solo.io/emitter/snap_in",
		Measure:     mSetupSnapshotIn,
		Description: "Deprecated. Use setup.gloo.solo.io/emitter/resources_in. The number of snapshots updates coming in.",
		Aggregation: view.Count(),
		TagKeys:     []tag.Key{},
	}

	setupResourcesInView = &view.View{
		Name:        "setup.gloo.solo.io/emitter/resources_in",
		Measure:     mSetupResourcesIn,
		Description: "The number of resource lists received on open watch channels",
		Aggregation: view.Count(),
		TagKeys: []tag.Key{
			skstats.NamespaceKey,
			skstats.ResourceKey,
		},
	}
	setupsnapshotOutView = &view.View{
		Name:        "setup.gloo.solo.io/emitter/snap_out",
		Measure:     mSetupSnapshotOut,
		Description: "The number of snapshots updates going out",
		Aggregation: view.Count(),
		TagKeys:     []tag.Key{},
	}
	setupsnapshotMissedView = &view.View{
		Name:        "setup.gloo.solo.io/emitter/snap_missed",
		Measure:     mSetupSnapshotMissed,
		Description: "The number of snapshots updates going missed. this can happen in heavy load. missed snapshot will be re-tried after a second.",
		Aggregation: view.Count(),
		TagKeys:     []tag.Key{},
	}
)

func init() {
	view.Register(
		setupsnapshotInView,
		setupsnapshotOutView,
		setupsnapshotMissedView,
		setupResourcesInView,
	)
}

type SetupSnapshotEmitter interface {
	Snapshots(watchNamespaces []string, opts clients.WatchOpts) (<-chan *SetupSnapshot, <-chan error, error)
}

type SetupEmitter interface {
	SetupSnapshotEmitter
	Register() error
	Settings() SettingsClient
	KubeNamespace() github_com_solo_io_solo_kit_pkg_api_v1_resources_common_kubernetes.KubeNamespaceClient
}

func NewSetupEmitter(settingsClient SettingsClient, kubeNamespaceClient github_com_solo_io_solo_kit_pkg_api_v1_resources_common_kubernetes.KubeNamespaceClient) SetupEmitter {
	return NewSetupEmitterWithEmit(settingsClient, kubeNamespaceClient, make(chan struct{}))
}

func NewSetupEmitterWithEmit(settingsClient SettingsClient, kubeNamespaceClient github_com_solo_io_solo_kit_pkg_api_v1_resources_common_kubernetes.KubeNamespaceClient, emit <-chan struct{}) SetupEmitter {
	return &setupEmitter{
		settings:      settingsClient,
		kubeNamespace: kubeNamespaceClient,
		forceEmit:     emit,
	}
}

type setupEmitter struct {
	forceEmit     <-chan struct{}
	settings      SettingsClient
	kubeNamespace github_com_solo_io_solo_kit_pkg_api_v1_resources_common_kubernetes.KubeNamespaceClient
}

func (c *setupEmitter) Register() error {
	if err := c.settings.Register(); err != nil {
		return err
	}
	if err := c.kubeNamespace.Register(); err != nil {
		return err
	}
	return nil
}

func (c *setupEmitter) Settings() SettingsClient {
	return c.settings
}

func (c *setupEmitter) KubeNamespace() github_com_solo_io_solo_kit_pkg_api_v1_resources_common_kubernetes.KubeNamespaceClient {
	return c.kubeNamespace
}

func (c *setupEmitter) Snapshots(watchNamespaces []string, opts clients.WatchOpts) (<-chan *SetupSnapshot, <-chan error, error) {

	if len(watchNamespaces) == 0 {
		watchNamespaces = []string{""}
	}

	for _, ns := range watchNamespaces {
		if ns == "" && len(watchNamespaces) > 1 {
			return nil, nil, errors.Errorf("the \"\" namespace is used to watch all namespaces. Snapshots can either be tracked for " +
				"specific namespaces or \"\" AllNamespaces, but not both.")
		}
	}

	errs := make(chan error)
	var done sync.WaitGroup
	ctx := opts.Ctx
	/* Create channel for Settings */
	type settingsListWithNamespace struct {
		list      SettingsList
		namespace string
	}
	settingsChan := make(chan settingsListWithNamespace)

	var initialSettingsList SettingsList
	/* Create channel for KubeNamespace */

	currentSnapshot := SetupSnapshot{}
	settingsByNamespace := make(map[string]SettingsList)

	for _, namespace := range watchNamespaces {
		/* Setup namespaced watch for Settings */
		{
			settings, err := c.settings.List(namespace, clients.ListOpts{Ctx: opts.Ctx, Selector: opts.Selector})
			if err != nil {
				return nil, nil, errors.Wrapf(err, "initial Settings list")
			}
			initialSettingsList = append(initialSettingsList, settings...)
			settingsByNamespace[namespace] = settings
		}
		settingsNamespacesChan, settingsErrs, err := c.settings.Watch(namespace, opts)
		if err != nil {
			return nil, nil, errors.Wrapf(err, "starting Settings watch")
		}

		done.Add(1)
		go func(namespace string) {
			defer done.Done()
			errutils.AggregateErrs(ctx, errs, settingsErrs, namespace+"-settings")
		}(namespace)

		/* Watch for changes and update snapshot */
		go func(namespace string) {
			for {
				select {
				case <-ctx.Done():
					return
				case settingsList, ok := <-settingsNamespacesChan:
					if !ok {
						return
					}
					select {
					case <-ctx.Done():
						return
					case settingsChan <- settingsListWithNamespace{list: settingsList, namespace: namespace}:
					}
				}
			}
		}(namespace)
	}
	/* Initialize snapshot for Settings */
	currentSnapshot.Settings = initialSettingsList.Sort()
	/* Setup cluster-wide watch for KubeNamespace */
	var err error
	currentSnapshot.Kubenamespaces, err = c.kubeNamespace.List(clients.ListOpts{Ctx: opts.Ctx, Selector: opts.Selector})
	if err != nil {
		return nil, nil, errors.Wrapf(err, "initial KubeNamespace list")
	}
	kubeNamespaceChan, kubeNamespaceErrs, err := c.kubeNamespace.Watch(opts)
	if err != nil {
		return nil, nil, errors.Wrapf(err, "starting KubeNamespace watch")
	}
	done.Add(1)
	go func() {
		defer done.Done()
		errutils.AggregateErrs(ctx, errs, kubeNamespaceErrs, "kubenamespaces")
	}()

	snapshots := make(chan *SetupSnapshot)
	go func() {
		// sent initial snapshot to kick off the watch
		initialSnapshot := currentSnapshot.Clone()
		snapshots <- &initialSnapshot

		timer := time.NewTicker(time.Second * 1)
		previousHash, err := currentSnapshot.Hash(nil)
		if err != nil {
			contextutils.LoggerFrom(ctx).Panicw("error while hashing, this should never happen", zap.Error(err))
		}
		sync := func() {
			currentHash, err := currentSnapshot.Hash(nil)
			// this should never happen, so panic if it does
			if err != nil {
				contextutils.LoggerFrom(ctx).Panicw("error while hashing, this should never happen", zap.Error(err))
			}
			if previousHash == currentHash {
				return
			}

			sentSnapshot := currentSnapshot.Clone()
			select {
			case snapshots <- &sentSnapshot:
				stats.Record(ctx, mSetupSnapshotOut.M(1))
				previousHash = currentHash
			default:
				stats.Record(ctx, mSetupSnapshotMissed.M(1))
			}
		}

		defer func() {
			close(snapshots)
			// we must wait for done before closing the error chan,
			// to avoid sending on close channel.
			done.Wait()
			close(errs)
		}()
		for {
			record := func() { stats.Record(ctx, mSetupSnapshotIn.M(1)) }

			select {
			case <-timer.C:
				sync()
			case <-ctx.Done():
				return
			case <-c.forceEmit:
				sentSnapshot := currentSnapshot.Clone()
				snapshots <- &sentSnapshot
			case settingsNamespacedList, ok := <-settingsChan:
				if !ok {
					return
				}
				record()

				namespace := settingsNamespacedList.namespace

				skstats.IncrementResourceCount(
					ctx,
					namespace,
					"settings",
					mSetupResourcesIn,
				)

				// merge lists by namespace
				settingsByNamespace[namespace] = settingsNamespacedList.list
				var settingsList SettingsList
				for _, settings := range settingsByNamespace {
					settingsList = append(settingsList, settings...)
				}
				currentSnapshot.Settings = settingsList.Sort()
			case kubeNamespaceList, ok := <-kubeNamespaceChan:
				if !ok {
					return
				}
				record()

				skstats.IncrementResourceCount(
					ctx,
					"<all>",
					"kube_namespace",
					mSetupResourcesIn,
				)

				currentSnapshot.Kubenamespaces = kubeNamespaceList
			}
		}
	}()
	return snapshots, errs, nil
}
