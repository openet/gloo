// Code generated by protoc-gen-ext. DO NOT EDIT.
// source: github.com/solo-io/gloo/projects/gloo/api/v1/virtual_host_options.proto

package v1

import (
	"bytes"
	"encoding/binary"
	"errors"
	"fmt"
	"strings"

	"github.com/golang/protobuf/proto"
	equality "github.com/solo-io/protoc-gen-ext/pkg/equality"
)

// ensure the imports are used
var (
	_ = errors.New("")
	_ = fmt.Print
	_ = binary.LittleEndian
	_ = bytes.Compare
	_ = strings.Compare
	_ = equality.Equalizer(nil)
	_ = proto.Message(nil)
)

// Equal function
func (m *VirtualHostOptions) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*VirtualHostOptions)
	if !ok {
		that2, ok := that.(VirtualHostOptions)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetExtensions()).(equality.Equalizer); ok {
		if !h.Equal(target.GetExtensions()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetExtensions(), target.GetExtensions()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetRetries()).(equality.Equalizer); ok {
		if !h.Equal(target.GetRetries()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetRetries(), target.GetRetries()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetStats()).(equality.Equalizer); ok {
		if !h.Equal(target.GetStats()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetStats(), target.GetStats()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetHeaderManipulation()).(equality.Equalizer); ok {
		if !h.Equal(target.GetHeaderManipulation()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetHeaderManipulation(), target.GetHeaderManipulation()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetCors()).(equality.Equalizer); ok {
		if !h.Equal(target.GetCors()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetCors(), target.GetCors()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetTransformations()).(equality.Equalizer); ok {
		if !h.Equal(target.GetTransformations()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetTransformations(), target.GetTransformations()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetRatelimitBasic()).(equality.Equalizer); ok {
		if !h.Equal(target.GetRatelimitBasic()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetRatelimitBasic(), target.GetRatelimitBasic()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetWaf()).(equality.Equalizer); ok {
		if !h.Equal(target.GetWaf()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetWaf(), target.GetWaf()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetRbac()).(equality.Equalizer); ok {
		if !h.Equal(target.GetRbac()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetRbac(), target.GetRbac()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetExtauth()).(equality.Equalizer); ok {
		if !h.Equal(target.GetExtauth()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetExtauth(), target.GetExtauth()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetDlp()).(equality.Equalizer); ok {
		if !h.Equal(target.GetDlp()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetDlp(), target.GetDlp()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetBufferPerRoute()).(equality.Equalizer); ok {
		if !h.Equal(target.GetBufferPerRoute()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetBufferPerRoute(), target.GetBufferPerRoute()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetCsrf()).(equality.Equalizer); ok {
		if !h.Equal(target.GetCsrf()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetCsrf(), target.GetCsrf()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetIncludeRequestAttemptCount()).(equality.Equalizer); ok {
		if !h.Equal(target.GetIncludeRequestAttemptCount()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetIncludeRequestAttemptCount(), target.GetIncludeRequestAttemptCount()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetIncludeAttemptCountInResponse()).(equality.Equalizer); ok {
		if !h.Equal(target.GetIncludeAttemptCountInResponse()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetIncludeAttemptCountInResponse(), target.GetIncludeAttemptCountInResponse()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetStagedTransformations()).(equality.Equalizer); ok {
		if !h.Equal(target.GetStagedTransformations()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetStagedTransformations(), target.GetStagedTransformations()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetExtProc()).(equality.Equalizer); ok {
		if !h.Equal(target.GetExtProc()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetExtProc(), target.GetExtProc()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetCorsPolicyMergeSettings()).(equality.Equalizer); ok {
		if !h.Equal(target.GetCorsPolicyMergeSettings()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetCorsPolicyMergeSettings(), target.GetCorsPolicyMergeSettings()) {
			return false
		}
	}

	switch m.RateLimitEarlyConfigType.(type) {

	case *VirtualHostOptions_RatelimitEarly:
		if _, ok := target.RateLimitEarlyConfigType.(*VirtualHostOptions_RatelimitEarly); !ok {
			return false
		}

		if h, ok := interface{}(m.GetRatelimitEarly()).(equality.Equalizer); ok {
			if !h.Equal(target.GetRatelimitEarly()) {
				return false
			}
		} else {
			if !proto.Equal(m.GetRatelimitEarly(), target.GetRatelimitEarly()) {
				return false
			}
		}

	case *VirtualHostOptions_RateLimitEarlyConfigs:
		if _, ok := target.RateLimitEarlyConfigType.(*VirtualHostOptions_RateLimitEarlyConfigs); !ok {
			return false
		}

		if h, ok := interface{}(m.GetRateLimitEarlyConfigs()).(equality.Equalizer); ok {
			if !h.Equal(target.GetRateLimitEarlyConfigs()) {
				return false
			}
		} else {
			if !proto.Equal(m.GetRateLimitEarlyConfigs(), target.GetRateLimitEarlyConfigs()) {
				return false
			}
		}

	default:
		// m is nil but target is not nil
		if m.RateLimitEarlyConfigType != target.RateLimitEarlyConfigType {
			return false
		}
	}

	switch m.RateLimitConfigType.(type) {

	case *VirtualHostOptions_Ratelimit:
		if _, ok := target.RateLimitConfigType.(*VirtualHostOptions_Ratelimit); !ok {
			return false
		}

		if h, ok := interface{}(m.GetRatelimit()).(equality.Equalizer); ok {
			if !h.Equal(target.GetRatelimit()) {
				return false
			}
		} else {
			if !proto.Equal(m.GetRatelimit(), target.GetRatelimit()) {
				return false
			}
		}

	case *VirtualHostOptions_RateLimitConfigs:
		if _, ok := target.RateLimitConfigType.(*VirtualHostOptions_RateLimitConfigs); !ok {
			return false
		}

		if h, ok := interface{}(m.GetRateLimitConfigs()).(equality.Equalizer); ok {
			if !h.Equal(target.GetRateLimitConfigs()) {
				return false
			}
		} else {
			if !proto.Equal(m.GetRateLimitConfigs(), target.GetRateLimitConfigs()) {
				return false
			}
		}

	default:
		// m is nil but target is not nil
		if m.RateLimitConfigType != target.RateLimitConfigType {
			return false
		}
	}

	switch m.RateLimitRegularConfigType.(type) {

	case *VirtualHostOptions_RatelimitRegular:
		if _, ok := target.RateLimitRegularConfigType.(*VirtualHostOptions_RatelimitRegular); !ok {
			return false
		}

		if h, ok := interface{}(m.GetRatelimitRegular()).(equality.Equalizer); ok {
			if !h.Equal(target.GetRatelimitRegular()) {
				return false
			}
		} else {
			if !proto.Equal(m.GetRatelimitRegular(), target.GetRatelimitRegular()) {
				return false
			}
		}

	case *VirtualHostOptions_RateLimitRegularConfigs:
		if _, ok := target.RateLimitRegularConfigType.(*VirtualHostOptions_RateLimitRegularConfigs); !ok {
			return false
		}

		if h, ok := interface{}(m.GetRateLimitRegularConfigs()).(equality.Equalizer); ok {
			if !h.Equal(target.GetRateLimitRegularConfigs()) {
				return false
			}
		} else {
			if !proto.Equal(m.GetRateLimitRegularConfigs(), target.GetRateLimitRegularConfigs()) {
				return false
			}
		}

	default:
		// m is nil but target is not nil
		if m.RateLimitRegularConfigType != target.RateLimitRegularConfigType {
			return false
		}
	}

	switch m.JwtConfig.(type) {

	case *VirtualHostOptions_Jwt:
		if _, ok := target.JwtConfig.(*VirtualHostOptions_Jwt); !ok {
			return false
		}

		if h, ok := interface{}(m.GetJwt()).(equality.Equalizer); ok {
			if !h.Equal(target.GetJwt()) {
				return false
			}
		} else {
			if !proto.Equal(m.GetJwt(), target.GetJwt()) {
				return false
			}
		}

	case *VirtualHostOptions_JwtStaged:
		if _, ok := target.JwtConfig.(*VirtualHostOptions_JwtStaged); !ok {
			return false
		}

		if h, ok := interface{}(m.GetJwtStaged()).(equality.Equalizer); ok {
			if !h.Equal(target.GetJwtStaged()) {
				return false
			}
		} else {
			if !proto.Equal(m.GetJwtStaged(), target.GetJwtStaged()) {
				return false
			}
		}

	default:
		// m is nil but target is not nil
		if m.JwtConfig != target.JwtConfig {
			return false
		}
	}

	return true
}
