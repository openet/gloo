// Code generated by protoc-gen-ext. DO NOT EDIT.
// source: github.com/solo-io/gloo/projects/gloo/api/v1/virtual_host_options.proto

package v1

import (
	"bytes"
	"encoding/binary"
	"errors"
	"fmt"
	"strings"

	"github.com/solo-io/protoc-gen-ext/pkg/clone"
	"google.golang.org/protobuf/proto"

	github_com_solo_io_gloo_projects_gloo_pkg_api_external_envoy_extensions_filters_http_buffer_v3 "github.com/solo-io/gloo/projects/gloo/pkg/api/external/envoy/extensions/filters/http/buffer/v3"

	github_com_solo_io_gloo_projects_gloo_pkg_api_external_envoy_extensions_filters_http_csrf_v3 "github.com/solo-io/gloo/projects/gloo/pkg/api/external/envoy/extensions/filters/http/csrf/v3"

	github_com_solo_io_gloo_projects_gloo_pkg_api_v1_enterprise_options_dlp "github.com/solo-io/gloo/projects/gloo/pkg/api/v1/enterprise/options/dlp"

	github_com_solo_io_gloo_projects_gloo_pkg_api_v1_enterprise_options_extauth_v1 "github.com/solo-io/gloo/projects/gloo/pkg/api/v1/enterprise/options/extauth/v1"

	github_com_solo_io_gloo_projects_gloo_pkg_api_v1_enterprise_options_extproc "github.com/solo-io/gloo/projects/gloo/pkg/api/v1/enterprise/options/extproc"

	github_com_solo_io_gloo_projects_gloo_pkg_api_v1_enterprise_options_jwt "github.com/solo-io/gloo/projects/gloo/pkg/api/v1/enterprise/options/jwt"

	github_com_solo_io_gloo_projects_gloo_pkg_api_v1_enterprise_options_ratelimit "github.com/solo-io/gloo/projects/gloo/pkg/api/v1/enterprise/options/ratelimit"

	github_com_solo_io_gloo_projects_gloo_pkg_api_v1_enterprise_options_rbac "github.com/solo-io/gloo/projects/gloo/pkg/api/v1/enterprise/options/rbac"

	github_com_solo_io_gloo_projects_gloo_pkg_api_v1_enterprise_options_waf "github.com/solo-io/gloo/projects/gloo/pkg/api/v1/enterprise/options/waf"

	github_com_solo_io_gloo_projects_gloo_pkg_api_v1_options_cors "github.com/solo-io/gloo/projects/gloo/pkg/api/v1/options/cors"

	github_com_solo_io_gloo_projects_gloo_pkg_api_v1_options_headers "github.com/solo-io/gloo/projects/gloo/pkg/api/v1/options/headers"

	github_com_solo_io_gloo_projects_gloo_pkg_api_v1_options_retries "github.com/solo-io/gloo/projects/gloo/pkg/api/v1/options/retries"

	github_com_solo_io_gloo_projects_gloo_pkg_api_v1_options_stats "github.com/solo-io/gloo/projects/gloo/pkg/api/v1/options/stats"

	github_com_solo_io_gloo_projects_gloo_pkg_api_v1_options_transformation "github.com/solo-io/gloo/projects/gloo/pkg/api/v1/options/transformation"

	google_golang_org_protobuf_types_known_wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

// ensure the imports are used
var (
	_ = errors.New("")
	_ = fmt.Print
	_ = binary.LittleEndian
	_ = bytes.Compare
	_ = strings.Compare
	_ = clone.Cloner(nil)
	_ = proto.Message(nil)
)

// Clone function
func (m *VirtualHostOptions) Clone() proto.Message {
	var target *VirtualHostOptions
	if m == nil {
		return target
	}
	target = &VirtualHostOptions{}

	if h, ok := interface{}(m.GetExtensions()).(clone.Cloner); ok {
		target.Extensions = h.Clone().(*Extensions)
	} else {
		target.Extensions = proto.Clone(m.GetExtensions()).(*Extensions)
	}

	if h, ok := interface{}(m.GetRetries()).(clone.Cloner); ok {
		target.Retries = h.Clone().(*github_com_solo_io_gloo_projects_gloo_pkg_api_v1_options_retries.RetryPolicy)
	} else {
		target.Retries = proto.Clone(m.GetRetries()).(*github_com_solo_io_gloo_projects_gloo_pkg_api_v1_options_retries.RetryPolicy)
	}

	if h, ok := interface{}(m.GetStats()).(clone.Cloner); ok {
		target.Stats = h.Clone().(*github_com_solo_io_gloo_projects_gloo_pkg_api_v1_options_stats.Stats)
	} else {
		target.Stats = proto.Clone(m.GetStats()).(*github_com_solo_io_gloo_projects_gloo_pkg_api_v1_options_stats.Stats)
	}

	if h, ok := interface{}(m.GetHeaderManipulation()).(clone.Cloner); ok {
		target.HeaderManipulation = h.Clone().(*github_com_solo_io_gloo_projects_gloo_pkg_api_v1_options_headers.HeaderManipulation)
	} else {
		target.HeaderManipulation = proto.Clone(m.GetHeaderManipulation()).(*github_com_solo_io_gloo_projects_gloo_pkg_api_v1_options_headers.HeaderManipulation)
	}

	if h, ok := interface{}(m.GetCors()).(clone.Cloner); ok {
		target.Cors = h.Clone().(*github_com_solo_io_gloo_projects_gloo_pkg_api_v1_options_cors.CorsPolicy)
	} else {
		target.Cors = proto.Clone(m.GetCors()).(*github_com_solo_io_gloo_projects_gloo_pkg_api_v1_options_cors.CorsPolicy)
	}

	if h, ok := interface{}(m.GetTransformations()).(clone.Cloner); ok {
		target.Transformations = h.Clone().(*github_com_solo_io_gloo_projects_gloo_pkg_api_v1_options_transformation.Transformations)
	} else {
		target.Transformations = proto.Clone(m.GetTransformations()).(*github_com_solo_io_gloo_projects_gloo_pkg_api_v1_options_transformation.Transformations)
	}

	if h, ok := interface{}(m.GetRatelimitBasic()).(clone.Cloner); ok {
		target.RatelimitBasic = h.Clone().(*github_com_solo_io_gloo_projects_gloo_pkg_api_v1_enterprise_options_ratelimit.IngressRateLimit)
	} else {
		target.RatelimitBasic = proto.Clone(m.GetRatelimitBasic()).(*github_com_solo_io_gloo_projects_gloo_pkg_api_v1_enterprise_options_ratelimit.IngressRateLimit)
	}

	if h, ok := interface{}(m.GetWaf()).(clone.Cloner); ok {
		target.Waf = h.Clone().(*github_com_solo_io_gloo_projects_gloo_pkg_api_v1_enterprise_options_waf.Settings)
	} else {
		target.Waf = proto.Clone(m.GetWaf()).(*github_com_solo_io_gloo_projects_gloo_pkg_api_v1_enterprise_options_waf.Settings)
	}

	if h, ok := interface{}(m.GetRbac()).(clone.Cloner); ok {
		target.Rbac = h.Clone().(*github_com_solo_io_gloo_projects_gloo_pkg_api_v1_enterprise_options_rbac.ExtensionSettings)
	} else {
		target.Rbac = proto.Clone(m.GetRbac()).(*github_com_solo_io_gloo_projects_gloo_pkg_api_v1_enterprise_options_rbac.ExtensionSettings)
	}

	if h, ok := interface{}(m.GetExtauth()).(clone.Cloner); ok {
		target.Extauth = h.Clone().(*github_com_solo_io_gloo_projects_gloo_pkg_api_v1_enterprise_options_extauth_v1.ExtAuthExtension)
	} else {
		target.Extauth = proto.Clone(m.GetExtauth()).(*github_com_solo_io_gloo_projects_gloo_pkg_api_v1_enterprise_options_extauth_v1.ExtAuthExtension)
	}

	if h, ok := interface{}(m.GetDlp()).(clone.Cloner); ok {
		target.Dlp = h.Clone().(*github_com_solo_io_gloo_projects_gloo_pkg_api_v1_enterprise_options_dlp.Config)
	} else {
		target.Dlp = proto.Clone(m.GetDlp()).(*github_com_solo_io_gloo_projects_gloo_pkg_api_v1_enterprise_options_dlp.Config)
	}

	if h, ok := interface{}(m.GetBufferPerRoute()).(clone.Cloner); ok {
		target.BufferPerRoute = h.Clone().(*github_com_solo_io_gloo_projects_gloo_pkg_api_external_envoy_extensions_filters_http_buffer_v3.BufferPerRoute)
	} else {
		target.BufferPerRoute = proto.Clone(m.GetBufferPerRoute()).(*github_com_solo_io_gloo_projects_gloo_pkg_api_external_envoy_extensions_filters_http_buffer_v3.BufferPerRoute)
	}

	if h, ok := interface{}(m.GetCsrf()).(clone.Cloner); ok {
		target.Csrf = h.Clone().(*github_com_solo_io_gloo_projects_gloo_pkg_api_external_envoy_extensions_filters_http_csrf_v3.CsrfPolicy)
	} else {
		target.Csrf = proto.Clone(m.GetCsrf()).(*github_com_solo_io_gloo_projects_gloo_pkg_api_external_envoy_extensions_filters_http_csrf_v3.CsrfPolicy)
	}

	if h, ok := interface{}(m.GetIncludeRequestAttemptCount()).(clone.Cloner); ok {
		target.IncludeRequestAttemptCount = h.Clone().(*google_golang_org_protobuf_types_known_wrapperspb.BoolValue)
	} else {
		target.IncludeRequestAttemptCount = proto.Clone(m.GetIncludeRequestAttemptCount()).(*google_golang_org_protobuf_types_known_wrapperspb.BoolValue)
	}

	if h, ok := interface{}(m.GetIncludeAttemptCountInResponse()).(clone.Cloner); ok {
		target.IncludeAttemptCountInResponse = h.Clone().(*google_golang_org_protobuf_types_known_wrapperspb.BoolValue)
	} else {
		target.IncludeAttemptCountInResponse = proto.Clone(m.GetIncludeAttemptCountInResponse()).(*google_golang_org_protobuf_types_known_wrapperspb.BoolValue)
	}

	if h, ok := interface{}(m.GetStagedTransformations()).(clone.Cloner); ok {
		target.StagedTransformations = h.Clone().(*github_com_solo_io_gloo_projects_gloo_pkg_api_v1_options_transformation.TransformationStages)
	} else {
		target.StagedTransformations = proto.Clone(m.GetStagedTransformations()).(*github_com_solo_io_gloo_projects_gloo_pkg_api_v1_options_transformation.TransformationStages)
	}

	if h, ok := interface{}(m.GetExtProc()).(clone.Cloner); ok {
		target.ExtProc = h.Clone().(*github_com_solo_io_gloo_projects_gloo_pkg_api_v1_enterprise_options_extproc.RouteSettings)
	} else {
		target.ExtProc = proto.Clone(m.GetExtProc()).(*github_com_solo_io_gloo_projects_gloo_pkg_api_v1_enterprise_options_extproc.RouteSettings)
	}

	if h, ok := interface{}(m.GetCorsPolicyMergeSettings()).(clone.Cloner); ok {
		target.CorsPolicyMergeSettings = h.Clone().(*github_com_solo_io_gloo_projects_gloo_pkg_api_v1_options_cors.CorsPolicyMergeSettings)
	} else {
		target.CorsPolicyMergeSettings = proto.Clone(m.GetCorsPolicyMergeSettings()).(*github_com_solo_io_gloo_projects_gloo_pkg_api_v1_options_cors.CorsPolicyMergeSettings)
	}

	switch m.RateLimitEarlyConfigType.(type) {

	case *VirtualHostOptions_RatelimitEarly:

		if h, ok := interface{}(m.GetRatelimitEarly()).(clone.Cloner); ok {
			target.RateLimitEarlyConfigType = &VirtualHostOptions_RatelimitEarly{
				RatelimitEarly: h.Clone().(*github_com_solo_io_gloo_projects_gloo_pkg_api_v1_enterprise_options_ratelimit.RateLimitVhostExtension),
			}
		} else {
			target.RateLimitEarlyConfigType = &VirtualHostOptions_RatelimitEarly{
				RatelimitEarly: proto.Clone(m.GetRatelimitEarly()).(*github_com_solo_io_gloo_projects_gloo_pkg_api_v1_enterprise_options_ratelimit.RateLimitVhostExtension),
			}
		}

	case *VirtualHostOptions_RateLimitEarlyConfigs:

		if h, ok := interface{}(m.GetRateLimitEarlyConfigs()).(clone.Cloner); ok {
			target.RateLimitEarlyConfigType = &VirtualHostOptions_RateLimitEarlyConfigs{
				RateLimitEarlyConfigs: h.Clone().(*github_com_solo_io_gloo_projects_gloo_pkg_api_v1_enterprise_options_ratelimit.RateLimitConfigRefs),
			}
		} else {
			target.RateLimitEarlyConfigType = &VirtualHostOptions_RateLimitEarlyConfigs{
				RateLimitEarlyConfigs: proto.Clone(m.GetRateLimitEarlyConfigs()).(*github_com_solo_io_gloo_projects_gloo_pkg_api_v1_enterprise_options_ratelimit.RateLimitConfigRefs),
			}
		}

	}

	switch m.RateLimitConfigType.(type) {

	case *VirtualHostOptions_Ratelimit:

		if h, ok := interface{}(m.GetRatelimit()).(clone.Cloner); ok {
			target.RateLimitConfigType = &VirtualHostOptions_Ratelimit{
				Ratelimit: h.Clone().(*github_com_solo_io_gloo_projects_gloo_pkg_api_v1_enterprise_options_ratelimit.RateLimitVhostExtension),
			}
		} else {
			target.RateLimitConfigType = &VirtualHostOptions_Ratelimit{
				Ratelimit: proto.Clone(m.GetRatelimit()).(*github_com_solo_io_gloo_projects_gloo_pkg_api_v1_enterprise_options_ratelimit.RateLimitVhostExtension),
			}
		}

	case *VirtualHostOptions_RateLimitConfigs:

		if h, ok := interface{}(m.GetRateLimitConfigs()).(clone.Cloner); ok {
			target.RateLimitConfigType = &VirtualHostOptions_RateLimitConfigs{
				RateLimitConfigs: h.Clone().(*github_com_solo_io_gloo_projects_gloo_pkg_api_v1_enterprise_options_ratelimit.RateLimitConfigRefs),
			}
		} else {
			target.RateLimitConfigType = &VirtualHostOptions_RateLimitConfigs{
				RateLimitConfigs: proto.Clone(m.GetRateLimitConfigs()).(*github_com_solo_io_gloo_projects_gloo_pkg_api_v1_enterprise_options_ratelimit.RateLimitConfigRefs),
			}
		}

	}

	switch m.RateLimitRegularConfigType.(type) {

	case *VirtualHostOptions_RatelimitRegular:

		if h, ok := interface{}(m.GetRatelimitRegular()).(clone.Cloner); ok {
			target.RateLimitRegularConfigType = &VirtualHostOptions_RatelimitRegular{
				RatelimitRegular: h.Clone().(*github_com_solo_io_gloo_projects_gloo_pkg_api_v1_enterprise_options_ratelimit.RateLimitVhostExtension),
			}
		} else {
			target.RateLimitRegularConfigType = &VirtualHostOptions_RatelimitRegular{
				RatelimitRegular: proto.Clone(m.GetRatelimitRegular()).(*github_com_solo_io_gloo_projects_gloo_pkg_api_v1_enterprise_options_ratelimit.RateLimitVhostExtension),
			}
		}

	case *VirtualHostOptions_RateLimitRegularConfigs:

		if h, ok := interface{}(m.GetRateLimitRegularConfigs()).(clone.Cloner); ok {
			target.RateLimitRegularConfigType = &VirtualHostOptions_RateLimitRegularConfigs{
				RateLimitRegularConfigs: h.Clone().(*github_com_solo_io_gloo_projects_gloo_pkg_api_v1_enterprise_options_ratelimit.RateLimitConfigRefs),
			}
		} else {
			target.RateLimitRegularConfigType = &VirtualHostOptions_RateLimitRegularConfigs{
				RateLimitRegularConfigs: proto.Clone(m.GetRateLimitRegularConfigs()).(*github_com_solo_io_gloo_projects_gloo_pkg_api_v1_enterprise_options_ratelimit.RateLimitConfigRefs),
			}
		}

	}

	switch m.JwtConfig.(type) {

	case *VirtualHostOptions_Jwt:

		if h, ok := interface{}(m.GetJwt()).(clone.Cloner); ok {
			target.JwtConfig = &VirtualHostOptions_Jwt{
				Jwt: h.Clone().(*github_com_solo_io_gloo_projects_gloo_pkg_api_v1_enterprise_options_jwt.VhostExtension),
			}
		} else {
			target.JwtConfig = &VirtualHostOptions_Jwt{
				Jwt: proto.Clone(m.GetJwt()).(*github_com_solo_io_gloo_projects_gloo_pkg_api_v1_enterprise_options_jwt.VhostExtension),
			}
		}

	case *VirtualHostOptions_JwtStaged:

		if h, ok := interface{}(m.GetJwtStaged()).(clone.Cloner); ok {
			target.JwtConfig = &VirtualHostOptions_JwtStaged{
				JwtStaged: h.Clone().(*github_com_solo_io_gloo_projects_gloo_pkg_api_v1_enterprise_options_jwt.JwtStagedVhostExtension),
			}
		} else {
			target.JwtConfig = &VirtualHostOptions_JwtStaged{
				JwtStaged: proto.Clone(m.GetJwtStaged()).(*github_com_solo_io_gloo_projects_gloo_pkg_api_v1_enterprise_options_jwt.JwtStagedVhostExtension),
			}
		}

	}

	return target
}
