// Code generated by protoc-gen-ext. DO NOT EDIT.
// source: github.com/solo-io/gloo/projects/gloo/api/v1/virtual_host_options.proto

package v1

import (
	"encoding/binary"
	"errors"
	"fmt"
	"hash"
	"hash/fnv"

	safe_hasher "github.com/solo-io/protoc-gen-ext/pkg/hasher"
	"github.com/solo-io/protoc-gen-ext/pkg/hasher/hashstructure"
)

// ensure the imports are used
var (
	_ = errors.New("")
	_ = fmt.Print
	_ = binary.LittleEndian
	_ = new(hash.Hash64)
	_ = fnv.New64
	_ = hashstructure.Hash
	_ = new(safe_hasher.SafeHasher)
)

// Hash function
//
// Deprecated: due to hashing implemention only using field values. The omission
// of the field name in the hash calculation can lead to hash collisions.
// Prefer the HashUnique function instead.
func (m *VirtualHostOptions) Hash(hasher hash.Hash64) (uint64, error) {
	if m == nil {
		return 0, nil
	}
	if hasher == nil {
		hasher = fnv.New64()
	}
	var err error
	if _, err = hasher.Write([]byte("gloo.solo.io.github.com/solo-io/gloo/projects/gloo/pkg/api/v1.VirtualHostOptions")); err != nil {
		return 0, err
	}

	if h, ok := interface{}(m.GetExtensions()).(safe_hasher.SafeHasher); ok {
		if _, err = hasher.Write([]byte("Extensions")); err != nil {
			return 0, err
		}
		if _, err = h.Hash(hasher); err != nil {
			return 0, err
		}
	} else {
		if fieldValue, err := hashstructure.Hash(m.GetExtensions(), nil); err != nil {
			return 0, err
		} else {
			if _, err = hasher.Write([]byte("Extensions")); err != nil {
				return 0, err
			}
			if err := binary.Write(hasher, binary.LittleEndian, fieldValue); err != nil {
				return 0, err
			}
		}
	}

	if h, ok := interface{}(m.GetRetries()).(safe_hasher.SafeHasher); ok {
		if _, err = hasher.Write([]byte("Retries")); err != nil {
			return 0, err
		}
		if _, err = h.Hash(hasher); err != nil {
			return 0, err
		}
	} else {
		if fieldValue, err := hashstructure.Hash(m.GetRetries(), nil); err != nil {
			return 0, err
		} else {
			if _, err = hasher.Write([]byte("Retries")); err != nil {
				return 0, err
			}
			if err := binary.Write(hasher, binary.LittleEndian, fieldValue); err != nil {
				return 0, err
			}
		}
	}

	if h, ok := interface{}(m.GetStats()).(safe_hasher.SafeHasher); ok {
		if _, err = hasher.Write([]byte("Stats")); err != nil {
			return 0, err
		}
		if _, err = h.Hash(hasher); err != nil {
			return 0, err
		}
	} else {
		if fieldValue, err := hashstructure.Hash(m.GetStats(), nil); err != nil {
			return 0, err
		} else {
			if _, err = hasher.Write([]byte("Stats")); err != nil {
				return 0, err
			}
			if err := binary.Write(hasher, binary.LittleEndian, fieldValue); err != nil {
				return 0, err
			}
		}
	}

	if h, ok := interface{}(m.GetHeaderManipulation()).(safe_hasher.SafeHasher); ok {
		if _, err = hasher.Write([]byte("HeaderManipulation")); err != nil {
			return 0, err
		}
		if _, err = h.Hash(hasher); err != nil {
			return 0, err
		}
	} else {
		if fieldValue, err := hashstructure.Hash(m.GetHeaderManipulation(), nil); err != nil {
			return 0, err
		} else {
			if _, err = hasher.Write([]byte("HeaderManipulation")); err != nil {
				return 0, err
			}
			if err := binary.Write(hasher, binary.LittleEndian, fieldValue); err != nil {
				return 0, err
			}
		}
	}

	if h, ok := interface{}(m.GetCors()).(safe_hasher.SafeHasher); ok {
		if _, err = hasher.Write([]byte("Cors")); err != nil {
			return 0, err
		}
		if _, err = h.Hash(hasher); err != nil {
			return 0, err
		}
	} else {
		if fieldValue, err := hashstructure.Hash(m.GetCors(), nil); err != nil {
			return 0, err
		} else {
			if _, err = hasher.Write([]byte("Cors")); err != nil {
				return 0, err
			}
			if err := binary.Write(hasher, binary.LittleEndian, fieldValue); err != nil {
				return 0, err
			}
		}
	}

	if h, ok := interface{}(m.GetTransformations()).(safe_hasher.SafeHasher); ok {
		if _, err = hasher.Write([]byte("Transformations")); err != nil {
			return 0, err
		}
		if _, err = h.Hash(hasher); err != nil {
			return 0, err
		}
	} else {
		if fieldValue, err := hashstructure.Hash(m.GetTransformations(), nil); err != nil {
			return 0, err
		} else {
			if _, err = hasher.Write([]byte("Transformations")); err != nil {
				return 0, err
			}
			if err := binary.Write(hasher, binary.LittleEndian, fieldValue); err != nil {
				return 0, err
			}
		}
	}

	if h, ok := interface{}(m.GetRatelimitBasic()).(safe_hasher.SafeHasher); ok {
		if _, err = hasher.Write([]byte("RatelimitBasic")); err != nil {
			return 0, err
		}
		if _, err = h.Hash(hasher); err != nil {
			return 0, err
		}
	} else {
		if fieldValue, err := hashstructure.Hash(m.GetRatelimitBasic(), nil); err != nil {
			return 0, err
		} else {
			if _, err = hasher.Write([]byte("RatelimitBasic")); err != nil {
				return 0, err
			}
			if err := binary.Write(hasher, binary.LittleEndian, fieldValue); err != nil {
				return 0, err
			}
		}
	}

	if h, ok := interface{}(m.GetWaf()).(safe_hasher.SafeHasher); ok {
		if _, err = hasher.Write([]byte("Waf")); err != nil {
			return 0, err
		}
		if _, err = h.Hash(hasher); err != nil {
			return 0, err
		}
	} else {
		if fieldValue, err := hashstructure.Hash(m.GetWaf(), nil); err != nil {
			return 0, err
		} else {
			if _, err = hasher.Write([]byte("Waf")); err != nil {
				return 0, err
			}
			if err := binary.Write(hasher, binary.LittleEndian, fieldValue); err != nil {
				return 0, err
			}
		}
	}

	if h, ok := interface{}(m.GetRbac()).(safe_hasher.SafeHasher); ok {
		if _, err = hasher.Write([]byte("Rbac")); err != nil {
			return 0, err
		}
		if _, err = h.Hash(hasher); err != nil {
			return 0, err
		}
	} else {
		if fieldValue, err := hashstructure.Hash(m.GetRbac(), nil); err != nil {
			return 0, err
		} else {
			if _, err = hasher.Write([]byte("Rbac")); err != nil {
				return 0, err
			}
			if err := binary.Write(hasher, binary.LittleEndian, fieldValue); err != nil {
				return 0, err
			}
		}
	}

	if h, ok := interface{}(m.GetExtauth()).(safe_hasher.SafeHasher); ok {
		if _, err = hasher.Write([]byte("Extauth")); err != nil {
			return 0, err
		}
		if _, err = h.Hash(hasher); err != nil {
			return 0, err
		}
	} else {
		if fieldValue, err := hashstructure.Hash(m.GetExtauth(), nil); err != nil {
			return 0, err
		} else {
			if _, err = hasher.Write([]byte("Extauth")); err != nil {
				return 0, err
			}
			if err := binary.Write(hasher, binary.LittleEndian, fieldValue); err != nil {
				return 0, err
			}
		}
	}

	if h, ok := interface{}(m.GetDlp()).(safe_hasher.SafeHasher); ok {
		if _, err = hasher.Write([]byte("Dlp")); err != nil {
			return 0, err
		}
		if _, err = h.Hash(hasher); err != nil {
			return 0, err
		}
	} else {
		if fieldValue, err := hashstructure.Hash(m.GetDlp(), nil); err != nil {
			return 0, err
		} else {
			if _, err = hasher.Write([]byte("Dlp")); err != nil {
				return 0, err
			}
			if err := binary.Write(hasher, binary.LittleEndian, fieldValue); err != nil {
				return 0, err
			}
		}
	}

	if h, ok := interface{}(m.GetBufferPerRoute()).(safe_hasher.SafeHasher); ok {
		if _, err = hasher.Write([]byte("BufferPerRoute")); err != nil {
			return 0, err
		}
		if _, err = h.Hash(hasher); err != nil {
			return 0, err
		}
	} else {
		if fieldValue, err := hashstructure.Hash(m.GetBufferPerRoute(), nil); err != nil {
			return 0, err
		} else {
			if _, err = hasher.Write([]byte("BufferPerRoute")); err != nil {
				return 0, err
			}
			if err := binary.Write(hasher, binary.LittleEndian, fieldValue); err != nil {
				return 0, err
			}
		}
	}

	if h, ok := interface{}(m.GetCsrf()).(safe_hasher.SafeHasher); ok {
		if _, err = hasher.Write([]byte("Csrf")); err != nil {
			return 0, err
		}
		if _, err = h.Hash(hasher); err != nil {
			return 0, err
		}
	} else {
		if fieldValue, err := hashstructure.Hash(m.GetCsrf(), nil); err != nil {
			return 0, err
		} else {
			if _, err = hasher.Write([]byte("Csrf")); err != nil {
				return 0, err
			}
			if err := binary.Write(hasher, binary.LittleEndian, fieldValue); err != nil {
				return 0, err
			}
		}
	}

	if h, ok := interface{}(m.GetIncludeRequestAttemptCount()).(safe_hasher.SafeHasher); ok {
		if _, err = hasher.Write([]byte("IncludeRequestAttemptCount")); err != nil {
			return 0, err
		}
		if _, err = h.Hash(hasher); err != nil {
			return 0, err
		}
	} else {
		if fieldValue, err := hashstructure.Hash(m.GetIncludeRequestAttemptCount(), nil); err != nil {
			return 0, err
		} else {
			if _, err = hasher.Write([]byte("IncludeRequestAttemptCount")); err != nil {
				return 0, err
			}
			if err := binary.Write(hasher, binary.LittleEndian, fieldValue); err != nil {
				return 0, err
			}
		}
	}

	if h, ok := interface{}(m.GetIncludeAttemptCountInResponse()).(safe_hasher.SafeHasher); ok {
		if _, err = hasher.Write([]byte("IncludeAttemptCountInResponse")); err != nil {
			return 0, err
		}
		if _, err = h.Hash(hasher); err != nil {
			return 0, err
		}
	} else {
		if fieldValue, err := hashstructure.Hash(m.GetIncludeAttemptCountInResponse(), nil); err != nil {
			return 0, err
		} else {
			if _, err = hasher.Write([]byte("IncludeAttemptCountInResponse")); err != nil {
				return 0, err
			}
			if err := binary.Write(hasher, binary.LittleEndian, fieldValue); err != nil {
				return 0, err
			}
		}
	}

	if h, ok := interface{}(m.GetStagedTransformations()).(safe_hasher.SafeHasher); ok {
		if _, err = hasher.Write([]byte("StagedTransformations")); err != nil {
			return 0, err
		}
		if _, err = h.Hash(hasher); err != nil {
			return 0, err
		}
	} else {
		if fieldValue, err := hashstructure.Hash(m.GetStagedTransformations(), nil); err != nil {
			return 0, err
		} else {
			if _, err = hasher.Write([]byte("StagedTransformations")); err != nil {
				return 0, err
			}
			if err := binary.Write(hasher, binary.LittleEndian, fieldValue); err != nil {
				return 0, err
			}
		}
	}

	if h, ok := interface{}(m.GetExtProc()).(safe_hasher.SafeHasher); ok {
		if _, err = hasher.Write([]byte("ExtProc")); err != nil {
			return 0, err
		}
		if _, err = h.Hash(hasher); err != nil {
			return 0, err
		}
	} else {
		if fieldValue, err := hashstructure.Hash(m.GetExtProc(), nil); err != nil {
			return 0, err
		} else {
			if _, err = hasher.Write([]byte("ExtProc")); err != nil {
				return 0, err
			}
			if err := binary.Write(hasher, binary.LittleEndian, fieldValue); err != nil {
				return 0, err
			}
		}
	}

	if h, ok := interface{}(m.GetCorsPolicyMergeSettings()).(safe_hasher.SafeHasher); ok {
		if _, err = hasher.Write([]byte("CorsPolicyMergeSettings")); err != nil {
			return 0, err
		}
		if _, err = h.Hash(hasher); err != nil {
			return 0, err
		}
	} else {
		if fieldValue, err := hashstructure.Hash(m.GetCorsPolicyMergeSettings(), nil); err != nil {
			return 0, err
		} else {
			if _, err = hasher.Write([]byte("CorsPolicyMergeSettings")); err != nil {
				return 0, err
			}
			if err := binary.Write(hasher, binary.LittleEndian, fieldValue); err != nil {
				return 0, err
			}
		}
	}

	switch m.RateLimitEarlyConfigType.(type) {

	case *VirtualHostOptions_RatelimitEarly:

		if h, ok := interface{}(m.GetRatelimitEarly()).(safe_hasher.SafeHasher); ok {
			if _, err = hasher.Write([]byte("RatelimitEarly")); err != nil {
				return 0, err
			}
			if _, err = h.Hash(hasher); err != nil {
				return 0, err
			}
		} else {
			if fieldValue, err := hashstructure.Hash(m.GetRatelimitEarly(), nil); err != nil {
				return 0, err
			} else {
				if _, err = hasher.Write([]byte("RatelimitEarly")); err != nil {
					return 0, err
				}
				if err := binary.Write(hasher, binary.LittleEndian, fieldValue); err != nil {
					return 0, err
				}
			}
		}

	case *VirtualHostOptions_RateLimitEarlyConfigs:

		if h, ok := interface{}(m.GetRateLimitEarlyConfigs()).(safe_hasher.SafeHasher); ok {
			if _, err = hasher.Write([]byte("RateLimitEarlyConfigs")); err != nil {
				return 0, err
			}
			if _, err = h.Hash(hasher); err != nil {
				return 0, err
			}
		} else {
			if fieldValue, err := hashstructure.Hash(m.GetRateLimitEarlyConfigs(), nil); err != nil {
				return 0, err
			} else {
				if _, err = hasher.Write([]byte("RateLimitEarlyConfigs")); err != nil {
					return 0, err
				}
				if err := binary.Write(hasher, binary.LittleEndian, fieldValue); err != nil {
					return 0, err
				}
			}
		}

	}

	switch m.RateLimitConfigType.(type) {

	case *VirtualHostOptions_Ratelimit:

		if h, ok := interface{}(m.GetRatelimit()).(safe_hasher.SafeHasher); ok {
			if _, err = hasher.Write([]byte("Ratelimit")); err != nil {
				return 0, err
			}
			if _, err = h.Hash(hasher); err != nil {
				return 0, err
			}
		} else {
			if fieldValue, err := hashstructure.Hash(m.GetRatelimit(), nil); err != nil {
				return 0, err
			} else {
				if _, err = hasher.Write([]byte("Ratelimit")); err != nil {
					return 0, err
				}
				if err := binary.Write(hasher, binary.LittleEndian, fieldValue); err != nil {
					return 0, err
				}
			}
		}

	case *VirtualHostOptions_RateLimitConfigs:

		if h, ok := interface{}(m.GetRateLimitConfigs()).(safe_hasher.SafeHasher); ok {
			if _, err = hasher.Write([]byte("RateLimitConfigs")); err != nil {
				return 0, err
			}
			if _, err = h.Hash(hasher); err != nil {
				return 0, err
			}
		} else {
			if fieldValue, err := hashstructure.Hash(m.GetRateLimitConfigs(), nil); err != nil {
				return 0, err
			} else {
				if _, err = hasher.Write([]byte("RateLimitConfigs")); err != nil {
					return 0, err
				}
				if err := binary.Write(hasher, binary.LittleEndian, fieldValue); err != nil {
					return 0, err
				}
			}
		}

	}

	switch m.RateLimitRegularConfigType.(type) {

	case *VirtualHostOptions_RatelimitRegular:

		if h, ok := interface{}(m.GetRatelimitRegular()).(safe_hasher.SafeHasher); ok {
			if _, err = hasher.Write([]byte("RatelimitRegular")); err != nil {
				return 0, err
			}
			if _, err = h.Hash(hasher); err != nil {
				return 0, err
			}
		} else {
			if fieldValue, err := hashstructure.Hash(m.GetRatelimitRegular(), nil); err != nil {
				return 0, err
			} else {
				if _, err = hasher.Write([]byte("RatelimitRegular")); err != nil {
					return 0, err
				}
				if err := binary.Write(hasher, binary.LittleEndian, fieldValue); err != nil {
					return 0, err
				}
			}
		}

	case *VirtualHostOptions_RateLimitRegularConfigs:

		if h, ok := interface{}(m.GetRateLimitRegularConfigs()).(safe_hasher.SafeHasher); ok {
			if _, err = hasher.Write([]byte("RateLimitRegularConfigs")); err != nil {
				return 0, err
			}
			if _, err = h.Hash(hasher); err != nil {
				return 0, err
			}
		} else {
			if fieldValue, err := hashstructure.Hash(m.GetRateLimitRegularConfigs(), nil); err != nil {
				return 0, err
			} else {
				if _, err = hasher.Write([]byte("RateLimitRegularConfigs")); err != nil {
					return 0, err
				}
				if err := binary.Write(hasher, binary.LittleEndian, fieldValue); err != nil {
					return 0, err
				}
			}
		}

	}

	switch m.JwtConfig.(type) {

	case *VirtualHostOptions_Jwt:

		if h, ok := interface{}(m.GetJwt()).(safe_hasher.SafeHasher); ok {
			if _, err = hasher.Write([]byte("Jwt")); err != nil {
				return 0, err
			}
			if _, err = h.Hash(hasher); err != nil {
				return 0, err
			}
		} else {
			if fieldValue, err := hashstructure.Hash(m.GetJwt(), nil); err != nil {
				return 0, err
			} else {
				if _, err = hasher.Write([]byte("Jwt")); err != nil {
					return 0, err
				}
				if err := binary.Write(hasher, binary.LittleEndian, fieldValue); err != nil {
					return 0, err
				}
			}
		}

	case *VirtualHostOptions_JwtStaged:

		if h, ok := interface{}(m.GetJwtStaged()).(safe_hasher.SafeHasher); ok {
			if _, err = hasher.Write([]byte("JwtStaged")); err != nil {
				return 0, err
			}
			if _, err = h.Hash(hasher); err != nil {
				return 0, err
			}
		} else {
			if fieldValue, err := hashstructure.Hash(m.GetJwtStaged(), nil); err != nil {
				return 0, err
			} else {
				if _, err = hasher.Write([]byte("JwtStaged")); err != nil {
					return 0, err
				}
				if err := binary.Write(hasher, binary.LittleEndian, fieldValue); err != nil {
					return 0, err
				}
			}
		}

	}

	return hasher.Sum64(), nil
}
