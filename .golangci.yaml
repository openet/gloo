# Configuration for make analyze
#
# For reference, consider:
#
# * https://github.com/golangci/golangci-lint/blob/master/.golangci.reference.yml
# * https://golangci-lint.run/usage/configuration/
#
linters:
  # Disable all linters.
  disable-all: true
  # Enable specific linters
  # https://golangci-lint.run/usage/linters/#enabled-by-default
  enable:
    # Given that we have not had linting enabled in this repository, it would be a large change to turn on all linters immediately.
    # We are aiming to progressively enable linters.
    # If you see a linter that can be added, please do so.
    # See: https://github.com/solo-io/gloo-mesh-enterprise/blob/main/.golangci.yaml for a reference
    - ginkgolinter

# Settings dedicated to specific linters.
linters-settings: {}

issues:
  # Maximum count of issues with the same text.
  # Set to 0 to disable.
  max-same-issues: 0

run:
  # Number of CPUs to use when running golangci-lint.
  # Default: the number of logical CPUs in the machine
  # The GME team found performance to be better when using a subset of total CPUs, so we chose 4, like they did.
  concurrency: 4

  # Include test files or not.
  # We have found that tests which break the linter are often symptomatic of a poorly written test.
  # To avoid unintentionally introducing tests that don't do what we expect, we run the linter against them.
  tests: true

  # Timeout for analysis, e.g. 30s, 5m.
  # We select 5 minutes somewhat arbitrarily.
  # The idea is that we want a timeout that is long enough to allow the job to run.
  # If we find that the job is timing out, we can explore ways to make this job run faster, or increase the timeout.
  timeout: 5m

  skip-dirs:
    # don't lint ruleguard files
    - test/rules

    # don't lint gomock intermediate files
    - 'gomock_reflect_\d*'

# output configuration options
output:
  # Format: colored-line-number|line-number|json|colored-tab|tab|checkstyle|code-climate|junit-xml|github-actions|teamcity
  #
  # Multiple can be specified by separating them by comma, output can be provided
  # for each of them by separating format name and path by colon symbol.
  # Output path can be either `stdout`, `stderr` or path to the file to write to.
  # Example: "checkstyle:report.xml,json:stdout,colored-line-number"
  #
  # Default: colored-line-number
  format: colored-line-number

  # Print lines of code with issue.
  print-issued-lines: true

  # Print linter name in the end of issue text.
  print-linter-name: true

  # Make issues output unique by line.
  uniq-by-line: true

  # Sort results by: filepath, line and column.
  sort-results: true